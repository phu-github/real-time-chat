{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Reactjs\\\\Real-time\\\\real-time-chat\\\\src\\\\Context\\\\AppProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport firebase, { auth } from '../firebase/config';\nimport { Spin } from 'antd';\nimport { AuthContext } from './AuthProvider';\nimport useFireStore from '../hooks/useFireStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/React.createContext();\nexport default function AppProvider({\n  children\n}) {\n  _s();\n\n  const [isAddRoomVisible, setIsAddRoomVisible] = useState(false);\n  const {\n    user: {\n      uid\n    }\n  } = useContext(AuthContext);\n  /* \r\n  name: room-name,\r\n  description: 'mo ta',\r\n  member: [uid1, uid3, uid3,...]\r\n   */\n\n  const roomsCondition = useMemo(() => {\n    return {\n      fieldName: 'members',\n      operator: 'array-contains',\n      compareValue: uid\n    };\n  }, [uid]);\n  const rooms = useFireStore('rooms', roomsCondition);\n  console.log('=========== rooms', rooms);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      rooms,\n      isAddRoomVisible,\n      setIsAddRoomVisible\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppProvider, \"hfrOAdADMUkUTTq1RwbEaFuyw3M=\", false, function () {\n  return [useFireStore];\n});\n\n_c = AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["D:/Project Reactjs/Real-time/real-time-chat/src/Context/AppProvider.js"],"names":["React","useContext","useMemo","useState","useHistory","firebase","auth","Spin","AuthContext","useFireStore","AppContext","createContext","AppProvider","children","isAddRoomVisible","setIsAddRoomVisible","user","uid","roomsCondition","fieldName","operator","compareValue","rooms","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,QAAP,IAAmBC,IAAnB,QAA+B,oBAA/B;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAEA,OAAO,MAAMC,UAAU,gBAAGV,KAAK,CAACW,aAAN,EAAnB;AAEP,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmC;AAAA;;AAE9C,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA2CZ,QAAQ,CAAC,KAAD,CAAzD;AAEA,QAAM;AAACa,IAAAA,IAAI,EAAE;AAACC,MAAAA;AAAD;AAAP,MAAgBhB,UAAU,CAACO,WAAD,CAAhC;AACA;AACJ;AACA;AACA;AACA;;AACI,QAAMU,cAAc,GAAGhB,OAAO,CAAC,MAAI;AAC/B,WAAO;AACHiB,MAAAA,SAAS,EAAE,SADR;AAEHC,MAAAA,QAAQ,EAAE,gBAFP;AAGHC,MAAAA,YAAY,EAAEJ;AAHX,KAAP;AAKH,GAN6B,EAM5B,CAACA,GAAD,CAN4B,CAA9B;AAOA,QAAMK,KAAK,GAAGb,YAAY,CAAC,OAAD,EAAUS,cAAV,CAA1B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,KAAjC;AAEA,sBACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASR,MAAAA,gBAAT;AAA2BC,MAAAA;AAA3B,KAA5B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAzBuBD,W;UAiBNH,Y;;;KAjBMG,W","sourcesContent":["import React, { useContext, useMemo, useState } from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport firebase, { auth } from '../firebase/config';\r\nimport { Spin } from 'antd';\r\nimport { AuthContext } from './AuthProvider';\r\nimport useFireStore from '../hooks/useFireStore';\r\n\r\nexport const AppContext = React.createContext()\r\n\r\nexport default function AppProvider({ children }) {\r\n\r\n    const [isAddRoomVisible, setIsAddRoomVisible ] = useState(false);\r\n\r\n    const {user: {uid}} = useContext(AuthContext); \r\n    /* \r\n    name: room-name,\r\n    description: 'mo ta',\r\n    member: [uid1, uid3, uid3,...]\r\n     */\r\n    const roomsCondition = useMemo(()=>{\r\n        return {\r\n            fieldName: 'members',\r\n            operator: 'array-contains',\r\n            compareValue: uid\r\n        }\r\n    },[uid]);\r\n    const rooms = useFireStore('rooms', roomsCondition);\r\n    console.log('=========== rooms', rooms);\r\n    \r\n    return (\r\n        <AppContext.Provider value={{ rooms, isAddRoomVisible, setIsAddRoomVisible }}>\r\n            {children}\r\n        </AppContext.Provider> \r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}